<?php

namespace GbCreation\WallBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;
/**
 * ItemRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CommentRepository extends EntityRepository
{

  public function getCommentsForBlog($itemId, $isApproved = true)
    {
        $qb = $this->createQueryBuilder('c')
                   ->select('c')
                   ->where('c.idItem = :item_id')
                   ->addOrderBy('c.created')
                   ->setParameter('item_id', $itemId);

        if (false === is_null($isApproved))
            $qb->andWhere('c.isApproved = :isApproved')
               ->setParameter('isApproved', $isApproved);

        return $qb->getQuery()
                  ->getResult();
    }


    public function getAllCommentsForBlogWithItem()
    {
        $qb = $this->createQueryBuilder('c')
                   ->select('c')
                   ->leftJoin('c.idItem', 'i')
                   ->addSelect('i')
                   ->addOrderBy('c.created', 'DESC');



        return $qb->getQuery()
                  ->getResult();
    }

    public function getAllCommentsForBlogWithItemPaginated($page,$nombrePerPage)
    {
        $query = $this->createQueryBuilder('c')
                   ->select('c')
                   ->leftJoin('c.idItem', 'i')
                   ->addSelect('i')
                   ->addOrderBy('c.created', 'DESC')
                   ->getQuery();


      $query->setFirstResult(($page-1) * $nombrePerPage)->setMaxResults($nombrePerPage);
  
      return new Paginator($query);
    }

    public function countAllComments()
    {
        
      $query = $this->createQueryBuilder('c')
      ->select('COUNT(c)')
      ->getQuery();

      return $query->getSingleScalarResult();
    }
    
    public function getLastComments($nbComment=10)
    {
        
      $query = $this->createQueryBuilder('c')
      ->orderBy('c.created', 'DESC')
      ->setMaxResults($nbComment)
      ->getQuery();

      return $query->getResult();
    }

}