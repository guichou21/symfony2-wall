<?php

namespace GbCreation\WallBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * ItemRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ItemRepository extends EntityRepository
{

	 public function getAllItems()
    {
        
      $query = $this->createQueryBuilder('i')
      ->orderBy('i.date', 'DESC')
      ->getQuery();
 
    	return $query->getResult();
    }

     public function getAllItemsPaginated($page,$nombrePerPage)
    {
        
      $query = $this->createQueryBuilder('i')
      ->orderBy('i.date', 'DESC')
      ->getQuery();

      $query->setFirstResult(($page-1) * $nombrePerPage)->setMaxResults($nombrePerPage);
  
      return new Paginator($query);
    }

   public function getLastItems($nbItem=10)
    {
        
      $query = $this->createQueryBuilder('i')
      ->orderBy('i.date', 'DESC')
      ->setMaxResults($nbItem)
      ->getQuery();

      return $query->getResult();
    }

    public function getLastItemsByType($nbItem=10,$itemType)
    {
        
      $query = $this->createQueryBuilder('i')
       ->where('i.type = :itemType')
      ->setParameter('itemType', $itemType)
      ->orderBy('i.date', 'DESC')
      ->setMaxResults($nbItem)
      ->getQuery();

      return $query->getResult();
    }


    public function getItemsInRange($firstItem=0,$nbItem=10)
    {
        
      $query = $this->createQueryBuilder('i')
      ->orderBy('i.date', 'DESC')
      ->setMaxResults($nbItem)
      ->setFirstResult($firstItem)
      ->getQuery();

      return $query->getResult();
    }

    public function getItemsInRangeFilteredBy($firstItem=0,$nbItem=10,$filter)
    {
        
      $query = $this->createQueryBuilder('i')
      ->orderBy('i.date', 'DESC')
      ->where('i.type = :itemType')
      ->setParameter('itemType', $filter)
      ->setMaxResults($nbItem)
      ->setFirstResult($firstItem)
      ->getQuery();

      return $query->getResult();
    }


    public function getItemsWithComments()
    {
        
      $query = $this->createQueryBuilder('i')
      ->leftJoin('i.comments', 'c')
      ->addSelect('c')
      ->orderBy('i.date', 'DESC')
      ->getQuery();
 
    	return $query->getResult();
    }

    public function countAllItems()
    {
        
      $query = $this->createQueryBuilder('i')
      ->select('COUNT(i)')
      ->getQuery();

      return $query->getSingleScalarResult();
    }


  public function getAllItemsByType($itemType)
    {
        
      $query = $this->createQueryBuilder('i')
      ->orderBy('i.date', 'DESC')
      ->where('i.type = :itemType')
      ->setParameter('itemType', $itemType)
      ->getQuery();
 
      return $query->getResult();
    }

 public function getAllItemsPaginatedByType($page,$nombrePerPage,$itemType)
    {
        
      $query = $this->createQueryBuilder('i')
      ->orderBy('i.date', 'DESC')
      ->where('i.type = :itemType')
      ->setParameter('itemType', $itemType)
      ->getQuery();

      $query->setFirstResult(($page-1) * $nombrePerPage)->setMaxResults($nombrePerPage);
  
      return new Paginator($query);
    }
  public function countAllItemsByType($itemType)
    {
        
      $query = $this->createQueryBuilder('i')
      ->select('COUNT(i)')
      ->where('i.type = :itemType')
      ->setParameter('itemType', $itemType)
      ->getQuery();

      return $query->getSingleScalarResult();
    }


}